security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords

    password_hashers:
        # Toutes les entit√©s avec cette interface utiliseront le dernier algo dispo (bcrypt)
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        mon_user:
            entity:
                class: 'App\Entity\User'
                property: 'email'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: '^/api'
            stateless: true
            provider: 'mon_user'
            custom_authenticator:
                - App\Security\ApiTestAuthenticator
        main:
            lazy: true
            provider: 'mon_user'
            entry_point: 'App\Security\EmptyAuthenticator'
            custom_authenticator:
                - App\Security\EmptyAuthenticator
                - App\Security\ApiTestAuthenticator
            logout:
                path: app_logout
                target: app_homepage

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api, roles: ROLE_USER }
